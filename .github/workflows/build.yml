name: Build Binaries

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x86_64
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            platform: linux
            arch: aarch64
            target: aarch64-unknown-linux-gnu
          - os: windows-latest
            platform: windows
            arch: x86_64
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            platform: windows
            arch: aarch64
            target: aarch64-pc-windows-msvc
          - os: macos-latest
            platform: macos
            arch: x86_64
            target: x86_64-apple-darwin
          - os: macos-latest
            platform: macos
            arch: aarch64
            target: aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create release directory
        run: mkdir -p release

      - name: Package binary
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" = "windows" ]; then
            cp target/${{ matrix.target }}/release/my-non-macos-games.exe release/my-non-macos-games-${{ matrix.platform }}-${{ matrix.arch }}.exe
          else
            cp target/${{ matrix.target }}/release/my-non-macos-games release/my-non-macos-games-${{ matrix.platform }}-${{ matrix.arch }}
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.platform }}-${{ matrix.arch }}
          path: release/
